name: Build and Deploy Spring Boot App to EC2

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: rosspalletscan-app
  CONTAINER_NAME: rosspalletscan-app
  UBUNTU_USER: ubuntu
  UBUNTU_HOST: ${{ secrets.UBUNTU_HOST }}
  UBUNTU_KEY: ${{ secrets.UBUNTU_SSH_KEY }}
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  TAG: latest

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Build Spring Boot App
        run: |
          ./mvnw clean package -DskipTests

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:$TAG .

      - name: Push Docker Image
        run: |
          docker push $REGISTRY/$IMAGE_NAME:$TAG

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Deploy on VM via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.UBUNTU_HOST }}
          username: ubuntu
          key: ${{ secrets.UBUNTU_SSH_KEY }}
          script: |
            echo "Logging in to GHCR..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            echo "Pulling latest image..."
            docker pull $REGISTRY/$IMAGE_NAME:$TAG

            echo "Stopping old container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "Starting new container..."
            docker run -d --name $CONTAINER_NAME --network rosspallet-net -p 8080:8080 $REGISTRY/$IMAGE_NAME:$TAG

            echo "Deployment complete!"
